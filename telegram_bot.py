import asyncio
import json
import random
import uuid
from random import randint

import requests
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackQueryHandler, CallbackContext

from PIL import Image, ImageDraw

button1 = InlineKeyboardButton("–ö–Ω–æ–ø–∫–∞ 1", callback_data="button1")
button2 = InlineKeyboardButton("–ö–Ω–æ–ø–∫–∞ 2", callback_data="button2")
button_url = InlineKeyboardButton("–°—Å—ã–ª–∫–∞ –Ω–∞ –ü—É—Ç–∏–Ω–∞", url="https://ru.wikipedia.org/wiki/%D0%92%D0%BB%D0%B0%D0%B4%D0%B8%D0%BC%D0%B8%D1%80_(%D0%B3%D0%BE%D1%80%D0%BE%D0%B4,_%D0%A0%D0%BE%D1%81%D1%81%D0%B8%D1%8F)", callback_data="putin")

keyboard = InlineKeyboardMarkup([
    [button1, button2],
    [button_url],
    [InlineKeyboardButton("–ö–Ω–æ–ø–∫–∞ 3", callback_data="button3")]
])

rock_button = InlineKeyboardButton("üóø", callback_data="button_rock")
paper_button = InlineKeyboardButton("üìú", callback_data="button_paper")
scissor_button = InlineKeyboardButton("‚úÇÔ∏è", callback_data="button_scissor")

rps_keyboard = InlineKeyboardMarkup([
    [rock_button, paper_button],
    [scissor_button]
])
#–ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á weather api –∏ –∫–ª—é—á telegram –±–æ—Ç–∞
with open("config.json", "r") as f:
    config = json.load(f)
    BOT_TOKEN = config["BOT_KEY"]
    WEATHER_API_KEY = config["WEATHER_API_KEY"]
    RUNWARE_API_KEY = config["RUNWARE_API_KEY"]

# –§—É–Ω–∫—Ü–∏—è —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
async def start(update: Update, context):
    await update.message.reply_text('–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç. –ù–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å!', reply_markup=keyboard)

# –≠—Ö–æ-–∫–æ–º–∞–Ω–¥–∞
async def echo(update: Update, context):
    word_user = update.message.text
    word_reserve = word_user[::-1]
    await update.message.reply_text(f'–¢—ã –Ω–∞–ø–∏—Å–∞–ª: {word_reserve}')

# –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ
async def guess_number(update: Update, context):
    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è —É–≥–∞–¥—ã–≤–∞–Ω–∏—è")
        return

    if not context.user_data.get("number"):
        context.user_data["number"] = str(randint(1, 10))

    if int(context.args[0]) > int(context.user_data["number"]):
        await update.message.reply_text("–ß–∏—Å–ª–æ –º–µ–Ω—å—à–µ")
    elif int(context.args[0]) < int(context.user_data["number"]):
        await update.message.reply_text("–ß–∏—Å–ª–æ –±–æ–ª—å—à–µ")
    else:
        await update.message.reply_text("–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã —É–≥–∞–¥–∞–ª–∏! –ß–∏—Å–ª–æ —Å–±—Ä–æ—à–µ–Ω–æ.")
        context.user_data["number"] = str(randint(1, 10))

# –¢–∞–π–º–µ—Ä
async def settimer(update: Update, context):
    if not context.args:
        await update.message.reply_text("–í—ã –¥–æ–ª–∂–Ω—ã –≤–≤–µ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ /settimer <—Å–µ–∫—É–Ω–¥—ã>")
        return

    seconds = int(context.args[0])
    await update.message.reply_text(f"–¢–∞–π–º–µ—Ä –Ω–∞ {seconds} —Å–µ–∫—É–Ω–¥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    await asyncio.sleep(seconds)
    await update.message.reply_text("–¢–∞–π–º–µ—Ä —Å—Ä–∞–±–æ—Ç–∞–ª!")

# –ö–æ–º–∞–Ω–¥–∞ –ø–æ–≥–æ–¥—ã
async def get_weather(update: Update, context):
    if not context.args:
        await update.message.reply_text("–í—ã –¥–æ–ª–∂–Ω—ã –≤–≤–µ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ /getWeather <–Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞>")
        return

    city = context.args[0]
    url = 'http://api.weatherapi.com/v1/current.json'
    aqi = 'yes'
    params = {
        'key': WEATHER_API_KEY,
        'q': city,
        'aqi': aqi
    }

    try:
        response = requests.get(url, params=params)
        response.raise_for_status()

        data = response.json()
        message = f"""
        –ì–æ—Ä–æ–¥: {data['location']['name']},
        –†–µ–≥–∏–æ–Ω: {data['location']['region']},
        –í—Ä–µ–º—è: {data['location']['localtime']},
        –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {data['current']['temp_c']}¬∞C,
        –û–±–ª–∞—á–Ω–æ—Å—Ç—å: {data['current']['cloud']},
        –í–ª–∞–∂–Ω–æ—Å—Ç—å: {data['current']['humidity']}%,
        –í–µ—Ç–µ—Ä: {data['current']['wind_kph']} –∫–º/—á
        """
        await update.message.reply_text(message)
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã: {e}")

async def play_rpc(update: Update, context):
    await update.message.reply_text("–ù–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É –≤ —Ü—É—ç-—Ñ–∞!", reply_markup=rps_keyboard)

async def generate_image(update: Update, context: CallbackContext):
    if not context.args:
        await update.message.reply_text("–í—ã –¥–æ–ª–∂–Ω—ã –≤–≤–µ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ /generate_image <—Ü–≤–µ—Ç>")
        return

    color = context.args[0]

    image = Image.new('RGB', (200, 200), color=(255, 255, 255))
    draw = ImageDraw.Draw(image)
    draw.ellipse((40, 10, 160, 125), outline=color, width = 5)
    draw.line((0,200,70,115), fill=color, width=5)
    draw.line((200,200,130,115), fill=color, width=5)

    image.save("white_image.jpg")
    await update.message.reply_photo(open("white_image.jpg", "rb"))
    #await update.message.reply_text("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–ª–∏–ª–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏!")

URL_AI = 'https://api.runware.ai/v1'

async def generate_image_ai(update: Update, context: CallbackContext):
    if not context.args:
        await update.message.reply_text(f"–ü–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É - /generate_image_ai <—Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç>")
        return
    prompt = ' '.join(context.args)
    #await update.message.reply_text(prompt)

    headers = {'Content-Type': 'application/json',
               'Authorization': f'Bearer {RUNWARE_API_KEY}'}

    task_uuid = str(uuid.uuid4())

    payload = [
        {
            "taskType": "imageInference",
            "taskUUID": task_uuid,
            "positivePrompt": f"{prompt}",
            "width": 512,
            "height": 512,
            "model": "runware:100@1",
            "numberResults": 1,
            "outputFormat": "PNG"
        }
    ]

    image_url = None

    main_response = requests.post(URL_AI, json = payload, headers=headers)

    if "data" in main_response.json():
        data = main_response.json().get('data')[0]
        image_url = data.get('imageURL')
        await update.message.reply_photo(image_url, caption = prompt)
        print(image_url)

    if not image_url:
        await update.message.reply_text("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å!")




async def button_callback(update: Update, context):
    query = update.callback_query
    await query.answer("SOS –Ω–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É")
    user = query.from_user

    variants = ["paper", "rock", "scissor"]
    bot_choice = random.choice(variants)
    user_choice = query.data[7:len(query.data)]
    #await query.message.reply_text(user_choice)

    win_varinats = {
        "scissor": "paper",
        "rock": "scissor",
        "paper": "rock",
    }
    emoji_varinats = {
        "paper": "üìú",
        "rock": "üóø",
        "scissor": "‚úÇÔ∏è"
    }

    if bot_choice == user_choice:
        await query.message.reply_text(f"–í—ã–±–æ—Ä –±–æ—Ç–∞-{emoji_varinats.get(bot_choice)},–í—ã–±–æ—Ä —á–µ–ª–æ–≤–µ–∫–∞-{emoji_varinats.get(user_choice)}, —ç—Ç–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ –Ω–∏—á—å—è!")
    elif win_varinats.get(bot_choice) == user_choice:
        await query.message.reply_text(f"–í—ã–±–æ—Ä –±–æ—Ç–∞-{emoji_varinats.get(bot_choice)},–í—ã–±–æ—Ä —á–µ–ª–æ–≤–µ–∫–∞-{emoji_varinats.get(user_choice)} - –ø–æ–±–µ–¥–∞ –∑–∞ –±–æ—Ç–æ–º!")
        print("–í—ã–±–æ—Ä –±–æ—Ç–∞", bot_choice)
        print("–í—ã–±–æ—Ä —á–µ–ª–æ–≤–µ–∫–∞", user_choice)
    else:
        await query.message.reply_text(f"–í—ã–±–æ—Ä –±–æ—Ç–∞-{emoji_varinats.get(bot_choice)},–í—ã–±–æ—Ä —á–µ–ª–æ–≤–µ–∫–∞-{emoji_varinats.get(user_choice)}, - –ø–æ–±–µ–¥–∞ –∑–∞ –∫–æ–∂–∞–Ω—ã–º!")

    """
    await query.message.reply_text(query.data)
    if query.data == "button1":
        await query.message.reply_text(f"–í—ã –Ω–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –æ–¥—ã–Ω, {user.first_name}")
    if query.data == "button2":
        await query.message.reply_text(f"–í—ã –Ω–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–≤—ã–∞ üìÑ, {user.first_name}")
    if query.data == "button3":
        await query.message.reply_text(f"–í—ã –Ω–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É —Ç—Ä–∏–∞–¥–∞,  {user.first_name}")
    if query.data == "putin":
        await query.message.reply_text(f"{user.first_name} —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≥–æ–ª–æ—Å–∞–ª –∑–∞ –ü—É—Ç–∏–Ω–∞!")
    """


# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def main():
    application = Application.builder().token(BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))
    application.add_handler(CommandHandler("guess", guess_number))
    application.add_handler(CommandHandler("settimer", settimer))
    application.add_handler(CommandHandler("getWeather", get_weather))
    application.add_handler(CallbackQueryHandler(button_callback))
    application.add_handler(CommandHandler("play_rpc", play_rpc))
    application.add_handler(CommandHandler("generate_image", generate_image))
    application.add_handler(CommandHandler("generate_image_ai", generate_image_ai))
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    application.run_polling()

if __name__ == '__main__':
    main()
